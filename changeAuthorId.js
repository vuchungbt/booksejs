import mongoose from 'mongoose';
import User from './src/models/User.js';
import Book from './src/models/Book.js';

mongoose.connect('mongodb://localhost:27017/bookstore1', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(async () => {
  console.log('Connected to MongoDB');
  
  const oldAuthorId = '6867a799e1f60d534a38a0a0';
  const newAuthorId = '6852d73afd39383f5bb95dc1';
  
  try {
    // 1. Find the author to be changed
    const oldAuthor = await User.findById(oldAuthorId);
    if (!oldAuthor) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y author v·ªõi ID c≈©');
      process.exit(1);
    }
    
    console.log(`‚úÖ T√¨m th·∫•y author: ${oldAuthor.name} (${oldAuthor.email})`);
    
    // 2. Check if new ID already exists
    const existingAuthor = await User.findById(newAuthorId);
    if (existingAuthor) {
      console.log(`‚ö†Ô∏è  Author v·ªõi ID m·ªõi ƒë√£ t·ªìn t·∫°i: ${existingAuthor.name}`);
      console.log('B·∫°n c√≥ mu·ªën merge 2 authors n√†y kh√¥ng? (Y/N)');
      // For safety, we'll exit here
      console.log('Script d·ª´ng ƒë·ªÉ tr√°nh ghi ƒë√®. H√£y ki·ªÉm tra v√† ch·∫°y l·∫°i n·∫øu ch·∫Øc ch·∫Øn.');
      process.exit(1);
    }
    
    // 3. Create new author document with new ID
    const authorData = oldAuthor.toObject();
    delete authorData._id; // Remove old _id
    
    const newAuthor = new User({
      _id: new mongoose.Types.ObjectId(newAuthorId),
      ...authorData
    });
    
    // 4. Save new author (no transaction needed for standalone MongoDB)
    await newAuthor.save();
    console.log(`‚úÖ ƒê√£ t·∫°o author m·ªõi v·ªõi ID: ${newAuthorId}`);
    
    // 5. Update all books that reference the old author
    const updateResult = await Book.updateMany(
      { author: oldAuthorId },
      { $set: { author: newAuthorId } }
    );
    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${updateResult.modifiedCount} s√°ch sang author ID m·ªõi`);
    
    // 6. Delete old author
    await User.findByIdAndDelete(oldAuthorId);
    console.log(`‚úÖ ƒê√£ x√≥a author c≈© v·ªõi ID: ${oldAuthorId}`);
    
    console.log('üéâ HO√ÄN TH√ÄNH! ƒê√£ thay ƒë·ªïi ID author th√†nh c√¥ng');
    
    // 7. Verify the change
    console.log('\n=== KI·ªÇM TRA K·∫æT QU·∫¢ ===');
    const verifyAuthor = await User.findById(newAuthorId);
    console.log(`Author m·ªõi: ${verifyAuthor ? verifyAuthor.name : 'KH√îNG T√åM TH·∫§Y'}`);
    
    const verifyOldAuthor = await User.findById(oldAuthorId);
    console.log(`Author c≈©: ${verifyOldAuthor ? 'V·∫™N T·ªíN T·∫†I' : 'ƒê√É X√ìA'}`);
    
    const booksWithNewAuthor = await Book.find({ author: newAuthorId });
    console.log(`S·ªë s√°ch v·ªõi author ID m·ªõi: ${booksWithNewAuthor.length}`);
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
    process.exit(1);
  }
}).catch(err => {
  console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err);
  process.exit(1);
}); 